{"version":3,"sources":["components/Results.js","components/LaunchScreenPatient.js","components/LaunchScreenPhysician.js","App.js","serviceWorker.js","index.js"],"names":["Results","Grid","container","spacing","item","md","Typography","gutterBottom","variant","src","height","width","Component","LaunchScreenPatient","this","setState","start","image_count","ultra_image_count","doneAnalysis","ultra_images","setInterval","axios","get","then","response","data","ultra_loc","post","state","includes","concat","className","justify","alignItems","Slide","direction","in","size","map","image","index","Fab","onClick","handleStart","incrementCount","ultra_label","patient_img","img_label","style","component","handleMove","handleDone","muiTheme","createMuiTheme","typography","fontFamily","App","startPatient","startPhysician","ThemeProvider","theme","LaunchScreenPhysician","handlePhysician","handlePatient","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.629730ec.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Grid, Typography } from '@material-ui/core';\n\nclass Results extends Component {\n    render() {\n        return(\n            <Grid container spacing={0}>\n                    <Grid item md={12}>\n                        <Typography gutterBottom variant=\"h4\"> Thank you. Your baby is in safe hands!!!</Typography>\n                    </Grid>\n                    <Grid item md={12}>\n                        <img src={`PROFILE.png`} height={\"50%\"} width={\"40%\"}/>\n                    </Grid>\n \n                        <Grid item md={6}>\n                            <img src={`ultra0.png`} height={\"50%\"} width={\"50%\"}/>\n                        </Grid>\n\n                    <Grid item md={6}>\n\n                            <img src={`ultra1.png`} height={\"50%\"} width={\"50%\"}/>\n\n                    </Grid>\n                    <Grid item md={6}>\n\n                            <img src={`ultra2.png`} height={\"50%\"} width={\"50%\"}/>\n\n                    </Grid>\n                    <Grid item md={6}>\n\n                            <img src={`ultra3.png`} height={\"50%\"} width={\"50%\"}/>\n\n                    </Grid>\n            </Grid>\n        );\n    }\n}\n\nexport default Results;\n","import React, { Component } from 'react';\nimport { Grid, Fab, Slide, Typography } from '@material-ui/core';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport Results from './Results';\nimport axios from 'axios';\n\nclass LaunchScreenPatient extends Component {\n\n    componentWillMount() {\n        this.setState({\n            start: false,\n            image_count: 0,\n            ultra_image_count: -1,\n            doneAnalysis: false,\n            ultra_images: []\n        });\n\n        setInterval(() => {\n            axios.get('patient').then(\n                (response) => {\n                    if (response.data.ultra_loc != -1) {\n                        this.setState({\n                            image_count: response.data.ultra_loc\n                        });\n                    }\n                }\n            )\n          }, 1000);\n\n          setInterval(() => {\n            axios.get('doneAnalysis').then(\n                (response) => {\n                    this.setState({\n                        doneAnalysis: response.data.doneAnalysis\n                    });\n                }\n            )\n          }, 1000);\n    };\n\n    handleStart() {\n        this.setState({\n            start: true\n        });\n    }\n\n    incrementCount() {\n        axios.post('patient', {'patient_img_count' : this.state.image_count});\n\n        if (!this.state.ultra_images.includes(this.state.image_count)) {\n            this.setState({\n                ultra_images: this.state.ultra_images.concat(this.state.image_count)\n            });\n        }\n        \n    }\n    render() {\n        return(\n            <Grid container>\n                {!this.state.start ? \n                    <Grid item md={12}>\n                        <Slide direction=\"down\" in={!this.state.start}>\n                            <header className=\"App-header\">\n                            <img src={`ultrasound_position${this.state.image_count}.png`} height={\"50%\"} width={\"40%\"}/>\n                            <br/>\n                            <Grid container>\n                                {this.state.ultra_images.size !== 0 && this.state.ultra_images.map((image, index) => \n                                    (\n                                        <Grid item md={3}>\n                                            <img src={`ultra${image}.png`} height={\"60%\"} width={\"60%\"}/>\n                                        </Grid>\n                                    )\n                                    )\n                                }\n                            </Grid>\n                            {this.state.doneAnalysis ?\n                                <Fab variant=\"extended\" onClick={() => this.handleStart()}>\n                                    View Results &nbsp;\n                                    <ArrowForwardIosIcon />\n                                </Fab>\n                                :\n                                <Fab variant=\"extended\" onClick={() => this.incrementCount()}>\n                                    Done Scan &nbsp;\n                                <ArrowForwardIosIcon />\n                                <ArrowForwardIosIcon/>\n                            </Fab>\n                            }\n                            </header>\n                        </Slide>\n                    </Grid>\n                    :\n                    <Grid item md={12} className=\"App-header\" justify=\"center\" alignItems=\"center\">\n                        <Slide direction=\"up\" in={this.state.start}>\n                            <Results/>\n                        </Slide>\n                    </Grid>\n                }\n            </Grid>\n\n        );\n    }\n}\n\nexport default LaunchScreenPatient;\n","import React, { Component } from 'react';\nimport { Grid, Fab, Slide, Typography } from '@material-ui/core';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport Results from './Results';\nimport axios from 'axios';\n\nclass LaunchScreenPatient extends Component {\n\n    componentWillMount() {\n        this.setState({\n            start: false,\n            image_count: 0,\n            ultra_image_count: -1,\n            doneAnalysis: false,\n            ultra_images: [],\n            ultra_label: []\n        });\n\n        setInterval(() => {\n            axios.get('physician').then(\n                (response) => {\n                    if (response.data.patient_img !== -1) {\n                        this.setState({\n                            ultra_image_count: response.data.patient_img,\n                        });\n\n                        if (response.data.patient_img !== -1 && !this.state.ultra_images.includes(response.data.patient_img)) {\n                            this.setState({\n                                ultra_images: this.state.ultra_images.concat(response.data.patient_img),\n                                ultra_label: this.state.ultra_label.concat(response.data.img_label)\n                            });\n                        }\n                    }\n                }\n            )\n          }, 1000);\n\n          axios.get('patient').then(\n            (response) => {\n                if (response.data.ultra_loc != -1) {\n                    this.setState({\n                        image_count: response.data.ultra_loc\n                    });\n                }\n            }\n        )\n    };\n\n    handleMove(image) {\n        axios.post('physician', {'image_count':image});\n\n        this.setState({\n            image_count: image\n        });\n    }\n\n    incrementCount() {\n        this.setState({\n            image_count: this.state.image_count + 1\n        })\n    }\n\n    handleDone() {\n        axios.post('doneAnalysis', {'doneAnalysis': true})\n    }\n\n    render() {\n        return(\n            <Grid container>\n                {!this.state.start ? \n                    <Grid item md={12}>\n                        <Slide direction=\"down\" in={!this.state.start}>\n                            <header className=\"App-header\">\n                            <img src={`ultrasound_position${this.state.image_count}.png`} height={\"50%\"} width={\"40%\"}/>\n                            <br/>\n                            \n                            <div style={{width: \"100%\"}}>\n                                <Grid container>\n                                    {this.state.ultra_images.size !== 0 && this.state.ultra_images.map((image, index) => \n                                        (\n                                            <Grid item md={3}>\n                                                <img src={`ultra${image}.png`} height={\"40%\"} width={\"40%\"}/>\n                                                <Typography variant=\"h5\" component=\"h6\">{this.state.ultra_label[index]}</Typography>\n                                            </Grid>\n                                        )\n                                        )\n                                    }\n                                </Grid>\n                                <Grid container spacing={0}>\n                                    <Grid item md={3}>\n                                    <Fab variant=\"extended\" onClick={() => this.handleMove(1)}>\n                                        Move Left &nbsp;\n                                        <ArrowForwardIosIcon />\n                                    </Fab>\n                                    </Grid>\n                                    <Grid item md={3}>\n                                    <Fab variant=\"extended\" onClick={() => this.handleMove(3)}>\n                                        Move Up &nbsp;\n                                        <ArrowForwardIosIcon />\n                                    </Fab>\n                                    </Grid>\n                                    <Grid item md={3}>\n                                    <Fab variant=\"extended\" onClick={() => this.handleMove(0)}>\n                                        Move Down &nbsp;\n                                        <ArrowForwardIosIcon />\n                                    </Fab>\n                                    </Grid>\n                                    <Grid item md={3}>\n                                    <Fab variant=\"extended\" onClick={() => this.handleMove(2)}>\n                                        Move Right &nbsp;\n                                        <ArrowForwardIosIcon />\n                                    </Fab>\n                                    </Grid>\n\n                                    <Grid item md={12}>\n                                    <Fab variant=\"extended\" onClick={() => this.handleDone()}>\n                                        Done &nbsp;\n                                        <ArrowForwardIosIcon />\n                                    </Fab>\n                                    </Grid>\n                                </Grid>\n                                \n                            </div>\n                            \n                            </header>\n                        </Slide>\n                    </Grid>\n                    :\n                    <Grid item md={12} className=\"App-header\" justify=\"center\" alignItems=\"center\">\n                        <Slide direction=\"up\" in={this.state.start}>\n                            <Results/>\n                        </Slide>\n                    </Grid>\n                }\n            </Grid>\n\n        );\n    }\n}\n\nexport default LaunchScreenPatient;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Grid, Fab, Slide, Typography } from '@material-ui/core';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport LaunchScreenPatient from './components/LaunchScreenPatient';\nimport LaunchScreenPhysician from './components/LaunchScreenPhysician';\nimport axios from 'axios';\n\nconst font = \"'Montserrat', sans-serif\";\n\nconst muiTheme = createMuiTheme({\n    typography : {\n        fontFamily: font\n    }\n})\n\nclass App extends Component {\n\n    componentWillMount() {\n        this.setState({\n            startPatient: false,\n            startPhysician: false\n        });\n        axios.get('Splash');\n    };\n\n    handlePatient() {\n        this.setState({\n            startPatient: true\n        });\n    };\n\n    handlePhysician() {\n        this.setState({\n            startPhysician: true\n        });\n    }\n\n    render() {\n        return (\n            <ThemeProvider theme={muiTheme}>\n            <div className=\"App\">\n                <Grid container>\n                    {(!this.state.startPatient && !this.state.startPhysician) ? \n                        <Grid item md={12}>\n                            <Slide direction=\"down\" in={!this.state.start}>\n                                <header className=\"App-header\">\n                                <img src=\"logo_back.png\" width={\"20%\"} height={\"20%\"}/>\n                                <Typography gutterBottom variant=\"h3\">\n                                    Welcome to the UltraAssist!!!\n                                </Typography>\n\n                                <Grid container spacing={2}>\n                                    <Grid item md={6}>\n                                        <Fab variant=\"extended\" onClick={() => this.handlePhysician()}>\n                                            Start as Physician&nbsp;\n                                            <ArrowForwardIosIcon />\n                                        </Fab>\n                                    </Grid>\n                                    <Grid item md={6}>\n                                        <Fab variant=\"extended\" onClick={() => this.handlePatient()}>\n                                            Start as Patient&nbsp;\n                                            <ArrowForwardIosIcon />\n                                        </Fab>\n                                    </Grid>\n                                </Grid>\n\n                                </header>\n                            </Slide>\n                        </Grid>\n                        :\n                        <Grid item md={12} className=\"App-header\" justify=\"center\" alignItems=\"center\">\n\n                            { this.state.startPatient ? <LaunchScreenPatient/> : <LaunchScreenPhysician/> }\n\n                        </Grid>\n\n                    }\n                </Grid>\n            </div>\n            </ThemeProvider>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}